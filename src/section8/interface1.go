package main

import "fmt"

type test interface { // 인터페이스

}

func main() {
	// 인터페이스
	// 객체의 동작을 표현, 골격
	// 단순히 동작에 대한 방법만 표시
	// 추상화 제공
	// 인터페이스의 매소드를 구현한 타입은 인터페이스로 사용 가능
	// Go 언어를 유연하게 사용 가능

	// 덕 타이핑 : Go 언어의 독창적인 특성
	// 인터페이스 -> 자바(전략패턴, 탬플릿매소드, 팩토리매소드패턴, 어댑터패턴..)
	// 디자인패턴 측면에서 Client 입장 -> 매소드의 구체적인 클래스를 몰라도 인터페이스 정의된 매서드를 사용하는 객체 보장
	// -> 클래스 간의 결합도 감소 -> 유지보수 향상, 개발 추가의 용이성 -> 독립적인 프로그래밍 가능

	// 예제 1
	/*
	  type 인터페이스명 interface{
	  매서드1() 반환값(타입형)
	  매서드2() // 반환값 없을 경우
	  }
	*/
	var t test
	fmt.Println(t)
}
